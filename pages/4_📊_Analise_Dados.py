# pages/4_üìä_Analise_Dados.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm, poisson, binom, shapiro

# Carregando os dados
df = pd.read_excel(st.secrets["caminhos"]["excel"])

# T√≠tulo da p√°gina
st.title("An√°lise de Dados Financeiros - Banco Safra üìä")

# ==============================================================================
# 1. Apresenta√ß√£o dos Dados e Tipos de Vari√°veis
# ==============================================================================
st.header("üìù Explica√ß√£o sobre a An√°lise de Dados")
st.markdown('''
Nesta se√ß√£o, estamos analisando dados financeiros de clientes do **Banco Safra**. Esses dados incluem informa√ß√µes como idade, saldo m√©dio na conta, renda mensal, pontua√ß√£o de cr√©dito, quantidade de transa√ß√µes, valor total movimentado, categoria de cliente (baixa, m√©dia ou alta renda), se o cliente possui investimentos e se j√° teve atrasos no pagamento.

O objetivo √© entender o comportamento dos clientes e identificar padr√µes que possam ajudar o banco a tomar decis√µes mais informadas. Por exemplo:

1. **Distribui√ß√£o de Renda**: Verificamos como a renda dos clientes est√° distribu√≠da.
2. **Rela√ß√£o entre Score de Cr√©dito e Saldo M√©dio**: Analisamos se clientes com maior pontua√ß√£o de cr√©dito tendem a ter um saldo m√©dio mais alto.
3. **Probabilidade de Atrasos**: Calculamos a probabilidade de um cliente ter atrasos no pagamento.
4. **Distribui√ß√£o de Transa√ß√µes**: Verificamos como as transa√ß√µes est√£o distribu√≠das entre as diferentes categorias de clientes.
''')

# An√°lise de Coer√™ncia dos Dados
st.header("üîç An√°lise de Coer√™ncia dos Dados")
st.markdown(f'''
1. **Idade**:  
   - M√≠nima: {df['Idade'].min()} anos  
   - M√°xima: {df['Idade'].max()} anos  
   - Verifica√ß√£o: {"‚úÖ" if 18 <= df['Idade'].min() and df['Idade'].max() <= 100 else "‚ùå"} (Intervalo esperado: 18-100 anos)

2. **Saldo M√©dio e Renda Mensal**:  
   - Saldo m√≠nimo: R$ {df['Saldo_Medio'].min():.2f}  
   - Saldo m√°ximo: R$ {df['Saldo_Medio'].max():.2f}  
   - Renda m√≠nima: R$ {df['Renda_Mensal'].min():.2f}  
   - Renda m√°xima: R$ {df['Renda_Mensal'].max():.2f}  
   - Verifica√ß√£o: {"‚úÖ" if df['Saldo_Medio'].min() >= 0 and df['Renda_Mensal'].min() >= 0 else "‚ùå"} (Valores positivos)

3. **Score de Cr√©dito**:  
   - M√≠nimo: {df['Score_Credito'].min()}  
   - M√°ximo: {df['Score_Credito'].max()}  
   - Verifica√ß√£o: {"‚úÖ" if 0 <= df['Score_Credito'].min() and df['Score_Credito'].max() <= 1000 else "‚ùå"} (Intervalo esperado: 0-1000)

4. **Quantidade de Transa√ß√µes**:  
   - M√≠nima: {df['Qtd_Transacoes'].min()}  
   - M√°xima: {df['Qtd_Transacoes'].max()}  
   - Verifica√ß√£o: {"‚úÖ" if df['Qtd_Transacoes'].min() >= 0 else "‚ùå"} (Valores positivos)

5. **Categoria de Cliente**:  
   - Categorias v√°lidas: {df['Categoria_Cliente'].unique()}  
   - Verifica√ß√£o: {"‚úÖ" if set(df['Categoria_Cliente'].unique()).issubset({'Baixa Renda', 'M√©dia Renda', 'Alta Renda'}) else "‚ùå"} (Categorias esperadas)
''')

st.header("1. Apresenta√ß√£o dos Dados e Tipos de Vari√°veis")
st.subheader("Amostra dos Dados (5 primeiras linhas)")
st.dataframe(df.head())

st.subheader("Tipos de Vari√°veis")
st.markdown('''
| Vari√°vel                | Tipo              | Descri√ß√£o                          |
|-------------------------|-------------------|------------------------------------|
| ID_Cliente              | Quantitativa      | Identificador √∫nico                |
| Idade                   | Quantitativa      | Idade do cliente                   |
| Saldo_Medio             | Quantitativa      | Saldo m√©dio na conta               |
| Renda_Mensal            | Quantitativa      | Renda mensal do cliente            |
| Score_Credito           | Quantitativa      | Pontua√ß√£o de cr√©dito (0-1000)      |
| Qtd_Transacoes          | Quantitativa      | N√∫mero de transa√ß√µes mensais        |
| Valor_Total_Transacoes  | Quantitativa      | Valor total movimentado            |
| Categoria_Cliente       | Qualitativa       | Classifica√ß√£o por renda            |
| Possui_Investimentos    | Bin√°ria           | Investimentos ativos (0/1)         |
| Atraso_Pagamento        | Bin√°ria           | Hist√≥rico de atrasos (0/1)         |
''')

st.subheader("Principais Perguntas de An√°lise")
st.markdown('''
1. Qual a distribui√ß√£o de renda dos clientes?
2. Existe rela√ß√£o entre score de cr√©dito e saldo m√©dio?
3. Qual a probabilidade de um cliente ter atrasos?
4. Como as transa√ß√µes se distribuem entre categorias de clientes?
''')

# ==============================================================================
# 2. Medidas Centrais e Dispers√£o
# ==============================================================================
st.header("2. Medidas Centrais e Dispers√£o")
var_num = st.selectbox("Selecione a vari√°vel para an√°lise:", 
                      ['Saldo_Medio', 'Renda_Mensal', 'Score_Credito', 'Qtd_Transacoes'])

col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    st.metric("M√©dia", f"R$ {df[var_num].mean()/1000:.2f} mil")
with col2:
    st.metric("Mediana", f"R$ {df[var_num].median()/1000:.2f} mil")
with col3:
    st.metric("Desvio Padr√£o", f"R$ {df[var_num].std()/1000:.2f} mil")
with col4:
    st.metric("Vari√¢ncia", f"R$ {df[var_num].var()/1e6:.2f} milh√µes")
with col5:
    st.metric("Moda", f"R$ {df[var_num].mode()[0]/1000:.2f} mil")

# Histograma
st.subheader(f"Distribui√ß√£o de {var_num}")
fig, ax = plt.subplots(figsize=(10, 6))
sns.histplot(df[var_num], kde=True, bins=20, color='#1d4ed8')
plt.xlabel(var_num)
plt.ylabel('Frequ√™ncia')
st.pyplot(fig)
plt.close(fig)

# Discuss√£o
st.subheader("Discuss√£o sobre a Distribui√ß√£o dos Dados")
Q1 = df[var_num].quantile(0.25)
Q3 = df[var_num].quantile(0.75)
IQR = Q3 - Q1
outliers = df[(df[var_num] < (Q1 - 1.5 * IQR)) | (df[var_num] > (Q3 + 1.5 * IQR))]
st.markdown(f'''
- **Simetria**: {"Assim√©trica positiva" if df[var_num].skew() > 0 else "Assim√©trica negativa" if df[var_num].skew() < 0 else "Sim√©trica"}
- **Outliers**: {len(outliers)} clientes com valores at√≠picos
- **Moda**: {df[var_num].mode()[0]:.2f} (valor mais frequente)
''')

# ==============================================================================
# 3. An√°lise de Correla√ß√£o (Gr√°fico de Dispers√£o)
# ==============================================================================
st.header("3. An√°lise de Correla√ß√£o (Gr√°fico de Dispers√£o)")
var_x = st.selectbox("Selecione a vari√°vel para o eixo X:", 
                     ['Saldo_Medio', 'Renda_Mensal', 'Score_Credito', 'Qtd_Transacoes'])
var_y = st.selectbox("Selecione a vari√°vel para o eixo Y:", 
                     ['Saldo_Medio', 'Renda_Mensal', 'Score_Credito', 'Qtd_Transacoes'])

fig, ax = plt.subplots(figsize=(10, 6))
sns.scatterplot(x=var_x, y=var_y, data=df, color='#1d4ed8', alpha=0.7)
plt.xlabel(var_x)
plt.ylabel(var_y)
st.pyplot(fig)
plt.close(fig)

# ==============================================================================
# 4. Distribui√ß√µes Probabil√≠sticas
# ==============================================================================
st.header("4. Distribui√ß√µes Probabil√≠sticas")

# Distribui√ß√£o Normal
st.subheader("Distribui√ß√£o Normal: Score de Cr√©dito")
mu, std = norm.fit(df['Score_Credito'])
fig, ax = plt.subplots(figsize=(10, 6))
sns.histplot(df['Score_Credito'], kde=True, stat='density', color='#4CAF50')
x = np.linspace(df['Score_Credito'].min(), df['Score_Credito'].max(), 100)
plt.plot(x, norm.pdf(x, mu, std), 'r--', linewidth=2)
st.pyplot(fig)
plt.close(fig)

# Distribui√ß√£o Binomial
st.subheader("Distribui√ß√£o Binomial: Atrasos de Pagamento")
p = df['Atraso_Pagamento'].mean()
x = np.arange(0, 2)
pmf = binom.pmf(x, n=1, p=p)
fig, ax = plt.subplots(figsize=(8, 6))
plt.bar(x, pmf, color='#FF5722', alpha=0.7)
plt.xticks(x, ['Sem Atraso', 'Com Atraso'])
for i, v in enumerate(pmf):
    plt.text(i, v + 0.02, f"{v:.2f}", ha='center', va='bottom')
st.pyplot(fig)
plt.close(fig)

# Distribui√ß√£o de Poisson (C√ìDIGO FINAL)
st.subheader("Distribui√ß√£o de Poisson: Quantidade de Transa√ß√µes")
lambda_ = df['Qtd_Transacoes'].mean()

# Limitar o intervalo de x para focar na regi√£o mais relevante
max_x = int(lambda_ + 3 * np.sqrt(lambda_))  # Regra pr√°tica: Œª ¬± 3œÉ
x = np.arange(max(0, int(lambda_ - 3 * np.sqrt(lambda_))), max_x + 1)
pmf = poisson.pmf(x, lambda_)

# Criar o gr√°fico com tamanho ajustado
fig, ax = plt.subplots(figsize=(16, 6))
bars = plt.bar(x, pmf, color='#9C27B0', alpha=0.7, width=0.8)

# Configura√ß√µes do gr√°fico
plt.xlabel('N√∫mero de Transa√ß√µes', fontsize=12)
plt.ylabel('Probabilidade', fontsize=12)
plt.xticks(x, rotation=75, fontsize=10, ha='right')  # Rota√ß√£o mais acentuada
plt.title(f'Distribui√ß√£o de Poisson (Œª = {lambda_:.2f})', fontsize=14)

# Adicionar anota√ß√µes apenas para probabilidades significativas
for bar in bars:
    height = bar.get_height()
    if height > 0.01:  # Apenas valores acima de 1%
        plt.text(
            bar.get_x() + bar.get_width()/2,
            height + 0.001,
            f'{height:.2f}',  # 2 casas decimais
            ha='center',
            va='bottom',
            fontsize=8,
            rotation=45
        )

# Ajustar layout e margens
plt.subplots_adjust(bottom=0.25)  # Mais espa√ßo para os r√≥tulos do eixo X
plt.grid(axis='y', linestyle='--', alpha=0.4)
st.pyplot(fig)
plt.close(fig)
# ==============================================================================
# An√°lise Complementar
# ==============================================================================
st.header("An√°lise por Categoria de Cliente")
fig, ax = plt.subplots(figsize=(10, 6))
sns.boxplot(x='Categoria_Cliente', y='Saldo_Medio', data=df, palette='Set2')
plt.xticks(rotation=45)
st.pyplot(fig)
plt.close(fig)

st.header("üéØ Conclus√£o")
st.markdown('''
Essa an√°lise permite ao Banco Safra entender melhor o perfil dos clientes e otimizar estrat√©gias comerciais e de risco.
''')